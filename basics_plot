# -*- coding: utf-8 -*-
"""
Created on Thu Oct 22 18:45:19 2020

@author: Ishita
"""

import random
import matplotlib, sys
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np
from tkinter import *
from tkinter import ttk


#root
root = Tk()
root.title("Sample Size and the Normal Distribution")

#mainframe
mainframe = ttk.Frame(root, padding = "3 3 12 12")
mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
mainframe.columnconfigure(0, weight=1)
mainframe.rowconfigure(0, weight=1)

def browseFunc():
    root = Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename()
    return file_path
   

def main():
    
    fpath=browseFunc()
    wordMap=dict()
    
    with open(fpath, 'r') as f:
        for line in f:
            for w in line.split():
                word = ''.join(e for e in w.lower() if e.isalnum())
                if word in wordMap:
                    wordMap[word] += 1
                else:
                    wordMap[word] = 1
    list_of_wordcount=[]
    for val in wordMap.values():
        list_of_wordcount.append(val)
    f = Figure(figsize=(5,4), dpi=100)
    canvas = FigureCanvasTkAgg(f, master=mainframe)
    canvas.get_tk_widget().grid(row=1, column=3, rowspan=6)

    p = f.gca()
    p.hist(list_of_wordcount, 5)
    p.set_xlabel('Words', fontsize = 15)
    p.set_ylabel('Frequency', fontsize = 15)
    #canvas.show()
    canvas.draw()

    
ttk.Label(mainframe,text="lab-3 group assignment\n\n").grid(row=1)
#histogram embed
f = Figure(figsize = (5,4), dpi=100)

#button for new histogram
button = ttk.Button(mainframe, text="New Histogram", command=main).grid(column=1, row=7, sticky=W)

#scale
#scale = Scale(mainframe, from_=0, to=10, orient=HORIZONTAL,length=400).grid(column = 5, row = 12, sticky= S)
scale = Scale(mainframe, from_=0, to=10, orient=HORIZONTAL,length=400)
scale.grid(column=3, row=12, sticky=S)

for child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5)

#sampleSize.focus()
#upperLimit.focus()
root.bind('<Return>', main)

root.mainloop()
